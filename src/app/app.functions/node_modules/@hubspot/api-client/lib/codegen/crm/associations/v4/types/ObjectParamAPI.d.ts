import { Configuration } from '../configuration';
import { BatchInputPublicAssociationMultiArchive } from '../models/BatchInputPublicAssociationMultiArchive';
import { BatchInputPublicAssociationMultiPost } from '../models/BatchInputPublicAssociationMultiPost';
import { BatchInputPublicDefaultAssociationMultiPost } from '../models/BatchInputPublicDefaultAssociationMultiPost';
import { BatchInputPublicFetchAssociationsBatchRequest } from '../models/BatchInputPublicFetchAssociationsBatchRequest';
import { BatchResponseLabelsBetweenObjectPair } from '../models/BatchResponseLabelsBetweenObjectPair';
import { BatchResponseLabelsBetweenObjectPairWithErrors } from '../models/BatchResponseLabelsBetweenObjectPairWithErrors';
import { BatchResponsePublicAssociationMultiWithLabel } from '../models/BatchResponsePublicAssociationMultiWithLabel';
import { BatchResponsePublicAssociationMultiWithLabelWithErrors } from '../models/BatchResponsePublicAssociationMultiWithLabelWithErrors';
import { BatchResponsePublicDefaultAssociation } from '../models/BatchResponsePublicDefaultAssociation';
import { CollectionResponseAssociationSpecWithLabelNoPaging } from '../models/CollectionResponseAssociationSpecWithLabelNoPaging';
import { PublicAssociationDefinitionCreateRequest } from '../models/PublicAssociationDefinitionCreateRequest';
import { PublicAssociationDefinitionUpdateRequest } from '../models/PublicAssociationDefinitionUpdateRequest';
import { BatchApiRequestFactory, BatchApiResponseProcessor } from "../apis/BatchApi";
export interface BatchApiArchiveRequest {
    fromObjectType: string;
    toObjectType: string;
    batchInputPublicAssociationMultiArchive: BatchInputPublicAssociationMultiArchive;
}
export interface BatchApiArchiveLabelsRequest {
    fromObjectType: string;
    toObjectType: string;
    batchInputPublicAssociationMultiPost: BatchInputPublicAssociationMultiPost;
}
export interface BatchApiCreateRequest {
    fromObjectType: string;
    toObjectType: string;
    batchInputPublicAssociationMultiPost: BatchInputPublicAssociationMultiPost;
}
export interface BatchApiCreateDefaultRequest {
    fromObjectType: string;
    toObjectType: string;
    batchInputPublicDefaultAssociationMultiPost: BatchInputPublicDefaultAssociationMultiPost;
}
export interface BatchApiGetPageRequest {
    fromObjectType: string;
    toObjectType: string;
    batchInputPublicFetchAssociationsBatchRequest: BatchInputPublicFetchAssociationsBatchRequest;
}
export declare class ObjectBatchApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: BatchApiRequestFactory, responseProcessor?: BatchApiResponseProcessor);
    archive(param: BatchApiArchiveRequest, options?: Configuration): Promise<void>;
    archiveLabels(param: BatchApiArchiveLabelsRequest, options?: Configuration): Promise<void>;
    create(param: BatchApiCreateRequest, options?: Configuration): Promise<BatchResponseLabelsBetweenObjectPairWithErrors | BatchResponseLabelsBetweenObjectPair>;
    createDefault(param: BatchApiCreateDefaultRequest, options?: Configuration): Promise<BatchResponsePublicDefaultAssociation>;
    getPage(param: BatchApiGetPageRequest, options?: Configuration): Promise<BatchResponsePublicAssociationMultiWithLabel | BatchResponsePublicAssociationMultiWithLabelWithErrors>;
}
import { DefinitionsApiRequestFactory, DefinitionsApiResponseProcessor } from "../apis/DefinitionsApi";
export interface DefinitionsApiArchiveRequest {
    fromObjectType: string;
    toObjectType: string;
    associationTypeId: number;
}
export interface DefinitionsApiCreateRequest {
    fromObjectType: string;
    toObjectType: string;
    publicAssociationDefinitionCreateRequest: PublicAssociationDefinitionCreateRequest;
}
export interface DefinitionsApiGetAllRequest {
    fromObjectType: string;
    toObjectType: string;
}
export interface DefinitionsApiUpdateRequest {
    fromObjectType: string;
    toObjectType: string;
    publicAssociationDefinitionUpdateRequest: PublicAssociationDefinitionUpdateRequest;
}
export declare class ObjectDefinitionsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: DefinitionsApiRequestFactory, responseProcessor?: DefinitionsApiResponseProcessor);
    archive(param: DefinitionsApiArchiveRequest, options?: Configuration): Promise<void>;
    create(param: DefinitionsApiCreateRequest, options?: Configuration): Promise<CollectionResponseAssociationSpecWithLabelNoPaging>;
    getAll(param: DefinitionsApiGetAllRequest, options?: Configuration): Promise<CollectionResponseAssociationSpecWithLabelNoPaging>;
    update(param: DefinitionsApiUpdateRequest, options?: Configuration): Promise<void>;
}
