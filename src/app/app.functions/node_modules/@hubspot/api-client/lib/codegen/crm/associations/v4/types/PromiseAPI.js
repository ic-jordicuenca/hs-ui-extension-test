"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromiseDefinitionsApi = exports.PromiseBatchApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class PromiseBatchApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableBatchApi(configuration, requestFactory, responseProcessor);
    }
    archive(fromObjectType, toObjectType, batchInputPublicAssociationMultiArchive, _options) {
        const result = this.api.archive(fromObjectType, toObjectType, batchInputPublicAssociationMultiArchive, _options);
        return result.toPromise();
    }
    archiveLabels(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost, _options) {
        const result = this.api.archiveLabels(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost, _options);
        return result.toPromise();
    }
    create(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost, _options) {
        const result = this.api.create(fromObjectType, toObjectType, batchInputPublicAssociationMultiPost, _options);
        return result.toPromise();
    }
    createDefault(fromObjectType, toObjectType, batchInputPublicDefaultAssociationMultiPost, _options) {
        const result = this.api.createDefault(fromObjectType, toObjectType, batchInputPublicDefaultAssociationMultiPost, _options);
        return result.toPromise();
    }
    getPage(fromObjectType, toObjectType, batchInputPublicFetchAssociationsBatchRequest, _options) {
        const result = this.api.getPage(fromObjectType, toObjectType, batchInputPublicFetchAssociationsBatchRequest, _options);
        return result.toPromise();
    }
}
exports.PromiseBatchApi = PromiseBatchApi;
const ObservableAPI_2 = require("./ObservableAPI");
class PromiseDefinitionsApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableDefinitionsApi(configuration, requestFactory, responseProcessor);
    }
    archive(fromObjectType, toObjectType, associationTypeId, _options) {
        const result = this.api.archive(fromObjectType, toObjectType, associationTypeId, _options);
        return result.toPromise();
    }
    create(fromObjectType, toObjectType, publicAssociationDefinitionCreateRequest, _options) {
        const result = this.api.create(fromObjectType, toObjectType, publicAssociationDefinitionCreateRequest, _options);
        return result.toPromise();
    }
    getAll(fromObjectType, toObjectType, _options) {
        const result = this.api.getAll(fromObjectType, toObjectType, _options);
        return result.toPromise();
    }
    update(fromObjectType, toObjectType, publicAssociationDefinitionUpdateRequest, _options) {
        const result = this.api.update(fromObjectType, toObjectType, publicAssociationDefinitionUpdateRequest, _options);
        return result.toPromise();
    }
}
exports.PromiseDefinitionsApi = PromiseDefinitionsApi;
//# sourceMappingURL=PromiseAPI.js.map