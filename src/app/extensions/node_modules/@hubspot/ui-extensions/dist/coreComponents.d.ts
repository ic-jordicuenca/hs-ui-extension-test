import type * as types from './types';
export declare const Alert: "Alert" & {
    readonly type?: "Alert" | undefined;
    readonly props?: types.AlertProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Alert", types.AlertProps, true>>;
export declare const Button: "Button" & {
    readonly type?: "Button" | undefined;
    readonly props?: types.ButtonProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Button", types.ButtonProps, true>>;
export declare const ButtonRow: "ButtonRow" & {
    readonly type?: "ButtonRow" | undefined;
    readonly props?: types.ButtonRowProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"ButtonRow", types.ButtonRowProps, true>>;
export declare const Card: "Card" & {
    readonly type?: "Card" | undefined;
    readonly props?: types.CardProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Card", types.CardProps, true>>;
export declare const DescriptionList: "DescriptionList" & {
    readonly type?: "DescriptionList" | undefined;
    readonly props?: types.DescriptionListProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"DescriptionList", types.DescriptionListProps, true>>;
export declare const DescriptionListItem: "DescriptionListItem" & {
    readonly type?: "DescriptionListItem" | undefined;
    readonly props?: types.DescriptionListItemProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"DescriptionListItem", types.DescriptionListItemProps, true>>;
export declare const Divider: "Divider" & {
    readonly type?: "Divider" | undefined;
    readonly props?: types.DividerProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Divider", types.DividerProps, true>>;
export declare const EmptyState: "EmptyState" & {
    readonly type?: "EmptyState" | undefined;
    readonly props?: types.EmptyStateProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"EmptyState", types.EmptyStateProps, true>>;
export declare const ErrorState: "ErrorState" & {
    readonly type?: "ErrorState" | undefined;
    readonly props?: types.ErrorStateProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"ErrorState", types.ErrorStateProps, true>>;
export declare const Form: "Form" & {
    readonly type?: "Form" | undefined;
    readonly props?: types.FormProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Form", types.FormProps, true>>;
export declare const Heading: "Heading" & {
    readonly type?: "Heading" | undefined;
    readonly props?: types.HeadingProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Heading", types.HeadingProps, true>>;
export declare const Image: "Image" & {
    readonly type?: "Image" | undefined;
    readonly props?: types.ImageProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Image", types.ImageProps, true>>;
export declare const Input: "Input" & {
    readonly type?: "Input" | undefined;
    readonly props?: types.InputProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Input", types.InputProps, true>>;
export declare const Link: "Link" & {
    readonly type?: "Link" | undefined;
    readonly props?: types.LinkProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Link", types.LinkProps, true>>;
export declare const TextArea: "TextArea" & {
    readonly type?: "TextArea" | undefined;
    readonly props?: types.TextAreaProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TextArea", types.TextAreaProps, true>>;
/** @deprecated use TextArea instead. With a capital A.*/
export declare const Textarea: "Textarea" & {
    readonly type?: "Textarea" | undefined;
    readonly props?: types.TextAreaProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Textarea", types.TextAreaProps, true>>;
export declare const LoadingSpinner: "LoadingSpinner" & {
    readonly type?: "LoadingSpinner" | undefined;
    readonly props?: types.LoadingSpinnerProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"LoadingSpinner", types.LoadingSpinnerProps, true>>;
export declare const ProgressBar: "ProgressBar" & {
    readonly type?: "ProgressBar" | undefined;
    readonly props?: types.ProgressBarProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"ProgressBar", types.ProgressBarProps, true>>;
export declare const Select: "Select" & {
    readonly type?: "Select" | undefined;
    readonly props?: types.SelectProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Select", types.SelectProps, true>>;
export declare const Tag: "Tag" & {
    readonly type?: "Tag" | undefined;
    readonly props?: types.TagProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Tag", types.TagProps, true>>;
export declare const Text: "Text" & {
    readonly type?: "Text" | undefined;
    readonly props?: types.TextProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Text", types.TextProps, true>>;
export declare const Tile: "Tile" & {
    readonly type?: "Tile" | undefined;
    readonly props?: types.TileProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Tile", types.TileProps, true>>;
/** @deprecated use Flex instead. It will be removed in the next release. */
export declare const Stack: "Stack" & {
    readonly type?: "Stack" | undefined;
    readonly props?: types.StackProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Stack", types.StackProps, true>>;
export declare const ToggleGroup: "ToggleGroup" & {
    readonly type?: "ToggleGroup" | undefined;
    readonly props?: types.ToggleGroupProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"ToggleGroup", types.ToggleGroupProps, true>>;
export declare const StatisticsItem: "StatisticsItem" & {
    readonly type?: "StatisticsItem" | undefined;
    readonly props?: types.StatisticsItemProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"StatisticsItem", types.StatisticsItemProps, true>>;
export declare const Statistics: "Statistics" & {
    readonly type?: "Statistics" | undefined;
    readonly props?: types.StatisticsProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Statistics", types.StatisticsProps, true>>;
export declare const StatisticsTrend: "StatisticsTrend" & {
    readonly type?: "StatisticsTrend" | undefined;
    readonly props?: types.StatisticsTrendProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"StatisticsTrend", types.StatisticsTrendProps, true>>;
export declare const Table: "Table" & {
    readonly type?: "Table" | undefined;
    readonly props?: types.TableProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Table", types.TableProps, true>>;
export declare const TableFooter: "TableFooter" & {
    readonly type?: "TableFooter" | undefined;
    readonly props?: types.TableElementProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TableFooter", types.TableElementProps, true>>;
export declare const TableCell: "TableCell" & {
    readonly type?: "TableCell" | undefined;
    readonly props?: types.TableCellProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TableCell", types.TableCellProps, true>>;
export declare const TableRow: "TableRow" & {
    readonly type?: "TableRow" | undefined;
    readonly props?: types.TableElementProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TableRow", types.TableElementProps, true>>;
export declare const TableBody: "TableBody" & {
    readonly type?: "TableBody" | undefined;
    readonly props?: types.TableElementProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TableBody", types.TableElementProps, true>>;
export declare const TableHeader: "TableHeader" & {
    readonly type?: "TableHeader" | undefined;
    readonly props?: types.TableHeaderProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TableHeader", types.TableHeaderProps, true>>;
export declare const TableHead: "TableHead" & {
    readonly type?: "TableHead" | undefined;
    readonly props?: types.TableElementProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TableHead", types.TableElementProps, true>>;
export declare const NumberInput: "NumberInput" & {
    readonly type?: "NumberInput" | undefined;
    readonly props?: types.NumberInputProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"NumberInput", types.NumberInputProps, true>>;
export declare const Box: "Box" & {
    readonly type?: "Box" | undefined;
    readonly props?: types.BoxProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Box", types.BoxProps, true>>;
export declare const StepIndicator: "StepIndicator" & {
    readonly type?: "StepIndicator" | undefined;
    readonly props?: types.StepIndicatorProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"StepIndicator", types.StepIndicatorProps, true>>;
export declare const Accordion: "Accordion" & {
    readonly type?: "Accordion" | undefined;
    readonly props?: types.AccordionProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Accordion", types.AccordionProps, true>>;
export declare const MultiSelect: "MultiSelect" & {
    readonly type?: "MultiSelect" | undefined;
    readonly props?: types.MultiSelectProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"MultiSelect", types.MultiSelectProps, true>>;
export declare const Flex: "Flex" & {
    readonly type?: "Flex" | undefined;
    readonly props?: types.FlexProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Flex", types.FlexProps, true>>;
export declare const DateInput: "DateInput" & {
    readonly type?: "DateInput" | undefined;
    readonly props?: types.DateInputProps | undefined;
    readonly children?: true | undefined;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"DateInput", types.DateInputProps, true>>;
